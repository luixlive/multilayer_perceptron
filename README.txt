Multilayer Perceptron
Luis Alfonso Ch√°vez Abbadie
Sep 09, 2017

This project runs in Python 2.


HELP:
  - Open project in terminal

  - Run 'python main.py --help' to get the list of commands


EXAMPLE OF USAGE:
  - Open project in terminal

  - Create an input file:
    'python main.py --input -f=input_file_path.txt'

  - Open and follow the instructions in file_name to set your input table.
    Example:
      0 0 | 0
      0 1 | 1
      1 1 | 1

  - Run the learning process:
    'python main.py --learn -i=input_file_path.txt -w=learning_file_path.json'
    The '-w' param has the most important file, the weights generated by the
    learning proces. Basically, your neuronal network.
    You can change the default values for alpha and maxError adding an optional
    param:
    '-a=alpha' (alpha is a number)
    '-m=maxError' (maxError is a number)

  - Optionally create an output file with the desired output results (if your
    network has a large number of inputs you might want to avoid to print the
    whole truth table).
    'python main.py --output -f=output_file_path.txt'
    Example:
      1 0

  - Optionally add parameter -r to round results to binary values

  - Run the multilayer perceptron:
    'python main.py --run -w=learning_file_path.json'
    You can use the optional output param to only print your desired values:
    '-o=output_file_path.txt'
    Also, there is an optional param to save the results in a file instead of
    printing them in terminal:
    '-s=save_results_here.txt'

  - Check the results in the output


MULTILAYER PERCEPTRON ALGORITHM:
  - Algorithm used in this project is mathematically explained in
    multilayer_perceptron_formulas.pdf
